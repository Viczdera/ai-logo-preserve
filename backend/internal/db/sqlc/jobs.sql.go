// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
    id,
    status,
    s3_key,
    upload_url
) VALUES (
    $1, $2, $3, $4
) RETURNING id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at
`

type CreateJobParams struct {
	ID        int64  `json:"id"`
	Status    string `json:"status"`
	S3Key     int64  `json:"s3_key"`
	UploadUrl string `json:"upload_url"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.queryRow(ctx, q.createJobStmt, createJob,
		arg.ID,
		arg.Status,
		arg.S3Key,
		arg.UploadUrl,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.S3Key,
		&i.UploadUrl,
		&i.ResultUrl,
		&i.LogosFound,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteJobStmt, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at FROM jobs WHERE id = $1
`

func (q *Queries) GetJob(ctx context.Context, id int64) (Job, error) {
	row := q.queryRow(ctx, q.getJobStmt, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.S3Key,
		&i.UploadUrl,
		&i.ResultUrl,
		&i.LogosFound,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at FROM jobs 
ORDER BY created_at DESC 
LIMIT $1 OFFSET $2
`

type ListJobsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobs(ctx context.Context, arg ListJobsParams) ([]Job, error) {
	rows, err := q.query(ctx, q.listJobsStmt, listJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.S3Key,
			&i.UploadUrl,
			&i.ResultUrl,
			&i.LogosFound,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobCompleted = `-- name: UpdateJobCompleted :one
UPDATE jobs 
SET status = $2, 
    logos_found = $3,
    result_url = $4,
    completed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at
`

type UpdateJobCompletedParams struct {
	ID         int64          `json:"id"`
	Status     string         `json:"status"`
	LogosFound sql.NullString `json:"logos_found"`
	ResultUrl  sql.NullString `json:"result_url"`
}

func (q *Queries) UpdateJobCompleted(ctx context.Context, arg UpdateJobCompletedParams) (Job, error) {
	row := q.queryRow(ctx, q.updateJobCompletedStmt, updateJobCompleted,
		arg.ID,
		arg.Status,
		arg.LogosFound,
		arg.ResultUrl,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.S3Key,
		&i.UploadUrl,
		&i.ResultUrl,
		&i.LogosFound,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateJobError = `-- name: UpdateJobError :one
UPDATE jobs 
SET status = $2, 
    error_message = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at
`

type UpdateJobErrorParams struct {
	ID           int64          `json:"id"`
	Status       string         `json:"status"`
	ErrorMessage sql.NullString `json:"error_message"`
}

func (q *Queries) UpdateJobError(ctx context.Context, arg UpdateJobErrorParams) (Job, error) {
	row := q.queryRow(ctx, q.updateJobErrorStmt, updateJobError, arg.ID, arg.Status, arg.ErrorMessage)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.S3Key,
		&i.UploadUrl,
		&i.ResultUrl,
		&i.LogosFound,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateJobStatus = `-- name: UpdateJobStatus :one
UPDATE jobs 
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, status, s3_key, upload_url, result_url, logos_found, error_message, created_at, updated_at, completed_at
`

type UpdateJobStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg UpdateJobStatusParams) (Job, error) {
	row := q.queryRow(ctx, q.updateJobStatusStmt, updateJobStatus, arg.ID, arg.Status)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.S3Key,
		&i.UploadUrl,
		&i.ResultUrl,
		&i.LogosFound,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
