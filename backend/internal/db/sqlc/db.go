// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createLogoStmt, err = db.PrepareContext(ctx, createLogo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLogo: %w", err)
	}
	if q.deleteJobStmt, err = db.PrepareContext(ctx, deleteJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJob: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.getLogosByJobIDStmt, err = db.PrepareContext(ctx, getLogosByJobID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLogosByJobID: %w", err)
	}
	if q.listJobsStmt, err = db.PrepareContext(ctx, listJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobs: %w", err)
	}
	if q.updateJobCompletedStmt, err = db.PrepareContext(ctx, updateJobCompleted); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobCompleted: %w", err)
	}
	if q.updateJobErrorStmt, err = db.PrepareContext(ctx, updateJobError); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobError: %w", err)
	}
	if q.updateJobStatusStmt, err = db.PrepareContext(ctx, updateJobStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createLogoStmt != nil {
		if cerr := q.createLogoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLogoStmt: %w", cerr)
		}
	}
	if q.deleteJobStmt != nil {
		if cerr := q.deleteJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.getLogosByJobIDStmt != nil {
		if cerr := q.getLogosByJobIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLogosByJobIDStmt: %w", cerr)
		}
	}
	if q.listJobsStmt != nil {
		if cerr := q.listJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsStmt: %w", cerr)
		}
	}
	if q.updateJobCompletedStmt != nil {
		if cerr := q.updateJobCompletedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobCompletedStmt: %w", cerr)
		}
	}
	if q.updateJobErrorStmt != nil {
		if cerr := q.updateJobErrorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobErrorStmt: %w", cerr)
		}
	}
	if q.updateJobStatusStmt != nil {
		if cerr := q.updateJobStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	createJobStmt          *sql.Stmt
	createLogoStmt         *sql.Stmt
	deleteJobStmt          *sql.Stmt
	getJobStmt             *sql.Stmt
	getLogosByJobIDStmt    *sql.Stmt
	listJobsStmt           *sql.Stmt
	updateJobCompletedStmt *sql.Stmt
	updateJobErrorStmt     *sql.Stmt
	updateJobStatusStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		createJobStmt:          q.createJobStmt,
		createLogoStmt:         q.createLogoStmt,
		deleteJobStmt:          q.deleteJobStmt,
		getJobStmt:             q.getJobStmt,
		getLogosByJobIDStmt:    q.getLogosByJobIDStmt,
		listJobsStmt:           q.listJobsStmt,
		updateJobCompletedStmt: q.updateJobCompletedStmt,
		updateJobErrorStmt:     q.updateJobErrorStmt,
		updateJobStatusStmt:    q.updateJobStatusStmt,
	}
}
